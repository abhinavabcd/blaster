#create
Model.create(a=b, c=d...)

#commiting changes
model.set_field(Model.field, something)


#multiple changes and commit at once
model.add_to_setfield(Model.field, vals)
model.delete_from_setfield(Model.field, vals)

At last
model.commit_changes()


#add local indexes and projections
CharField(indexed=True, projections=["other_field_name"])

#add secondary indexes and projections

class ChatSession(Model):
    __table_name__ = "ashoka_chat_session"
    ReadCapacityUnits = 2
    WriteCapacityUnits = 2
    
    __secondary_indexes__ = {"item_id_index": dict(hash_key="item_id", range_key="is_archived", read_capacity=2, write_capacity=2, projections=["name"]) }



#query
values, cursor = Model.query().where(Model.field.eq(something)  , Model.field.gt(something2) ).get_items()

#pass cursor  for next batch
values, cursor = Model.query().start_key(cursor).where(Model.field.eq(something)  , Model.field.gt(something2) ).get_items()

#use a different index
.use_index(name_or_field, asc) #name=>global secondary index, #field=>local secondary index , asc => ordering

#
.get_items() #requery flag => does another query to get all other attributes if queried on a secondary index



#See Allspark-api-server for sample projects using dynamoORM


